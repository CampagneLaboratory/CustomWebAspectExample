package org.campagnelab.staging.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Iterator;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.campagnelab.staging.behavior.StagingInfo__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.util.Function;
import java.io.File;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import java.util.Map;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.io.IOException;
import jetbrains.mps.util.FileUtil;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.FileInputStream;
import java.nio.charset.Charset;
import jetbrains.mps.internal.make.runtime.util.DeltaReconciler;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.util.MacroHelper;

public class stageFilesToWebApp_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("org.campagnelab.staging.stageFilesToWebApp");
  public stageFilesToWebApp_Facet() {
    ListSequence.fromList(targets).addElement(new stageFilesToWebApp_Facet.Target_recordDestination());
    ListSequence.fromList(targets).addElement(new stageFilesToWebApp_Facet.Target_stageFiles());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.make.facets.ReloadClasses")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new stageFilesToWebApp_Facet.TargetProperties();
  }
  public static class Target_recordDestination implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("org.campagnelab.staging.stageFilesToWebApp.recordDestination");
    public Target_recordDestination() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_dn7ye8_a0a = null;
          final Iterable<GResource> input = (Iterable<GResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              progressMonitor.start("Record destination for staging files", 100);
              // collect info about root nodes that need staging into StageFiles.needsStaging 
              stageFilesToWebApp_Facet.Target_stageFiles.vars(pa.global()).needsStaging(MapSequence.fromMap(new HashMap<String, StagingInfoTriplet>()));
              for (GResource gres : Sequence.fromIterable(input)) {
                final SModel m = gres.status().getOutputModel();
                ModelAccess.instance().runReadAction(new Runnable() {
                  public void run() {
                    {
                      Iterator<SNode> rootNode_it = ListSequence.fromList(SModelOperations.roots(m, null)).iterator();
                      SNode rootNode_var;
                      while (rootNode_it.hasNext()) {
                        rootNode_var = rootNode_it.next();
                        SNode root = rootNode_var;
                        if (AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a59db0e4L, "org.campagnelab.staging.structure.StageToAnnotation"))) != null) {

                          SNode destination = SLinkOperations.getTarget(AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a59db0e4L, "org.campagnelab.staging.structure.StageToAnnotation"))), MetaAdapterFactory.getContainmentLink(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a59db0e4L, 0x2e0a72d3a5a06291L, "destination"));
                          ArrayList<String> imports = new ArrayList<String>();
                          imports.addAll(StagingInfo__BehaviorDescriptor.imports_id2SasHe_NVm7.invoke(destination));
                          boolean renameExtension = (SLinkOperations.getTarget(destination, MetaAdapterFactory.getContainmentLink(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x658b57cc0de14c6fL, "renameExtension")) != null);
                          String from = "";
                          String to = "";
                          if (renameExtension) {
                            from = SPropertyOperations.getString(SLinkOperations.getTarget(destination, MetaAdapterFactory.getContainmentLink(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x658b57cc0de14c6fL, "renameExtension")), MetaAdapterFactory.getProperty(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x658b57cc0de14c3dL, 0x658b57cc0de14c3eL, "from"));
                            to = SPropertyOperations.getString(SLinkOperations.getTarget(destination, MetaAdapterFactory.getContainmentLink(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x658b57cc0de14c6fL, "renameExtension")), MetaAdapterFactory.getProperty(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x658b57cc0de14c3dL, 0x658b57cc0de14c40L, "to"));
                          }
                          StagingInfoTriplet info = new StagingInfoTriplet(SPropertyOperations.getString(destination, MetaAdapterFactory.getProperty(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x2e0a72d3a5ac71ecL, "generatedFilename")), SPropertyOperations.getString(destination, MetaAdapterFactory.getProperty(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x2e0a72d3a5a0a144L, "stagingDirRoot")), SPropertyOperations.getString(destination, MetaAdapterFactory.getProperty(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x2e0a72d3a5a0a146L, "package")), renameExtension, from, to, imports, SPropertyOperations.getBoolean(destination, MetaAdapterFactory.getProperty(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x4c2903f10145acb1L, "skipWhenFileExists")));
                          MapSequence.fromMap(stageFilesToWebApp_Facet.Target_stageFiles.vars(pa.global()).needsStaging()).put(SPropertyOperations.getString(destination, MetaAdapterFactory.getProperty(0xb42eb996b76a4e2dL, 0x81329278b4ff8107L, 0x2e0a72d3a5a0628aL, 0x2e0a72d3a5ac71ecL, "generatedFilename")), info);
                          progressMonitor.advance(1);
                        }
                      }
                    }
                  }
                });
                progressMonitor.done();
              }
            default:
              return new IResult.SUCCESS(_output_dn7ye8_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("org.campagnelab.staging.stageFilesToWebApp.stageFiles"), new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen"), new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(GResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
    public int workEstimate() {
      return 50;
    }
  }
  public static class Target_stageFiles implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("org.campagnelab.staging.stageFilesToWebApp.stageFiles");
    public Target_stageFiles() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_dn7ye8_a0b = null;
          final Iterable<TResource> input = (Iterable<TResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              if (vars(pa.global()).needsStaging() == null) {
                monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Target stageFilesToWebApp.recordDestination must run first. Need triplets to stage file")));
                return new IResult.FAILURE(_output_dn7ye8_a0b);
              }

              progressMonitor.start("Staging files for web-app", MapSequence.fromMap(vars(pa.global()).needsStaging()).count());
              try {
                final boolean[] failure = new boolean[1];
                for (TResource tres : Sequence.fromIterable(input)) {
                  final Iterable<IDelta> deltas = tres.delta();
                  if (tres.module() == null) {
                    continue;
                  }
                  final Function moveFunctionGeneric = new Function<Quatro, Boolean>() {
                    public Boolean fun(Quatro infoWithFile) {
                      File toMove = new File(infoWithFile.file().getPath());

                      final String projectDir = stagingRootExpanded(infoWithFile) + File.separator + ((isNotEmptyString(infoWithFile.triplet().packageName()) ? infoWithFile.triplet().packageName().replace('.', '/') : ""));
                      (new File(projectDir)).mkdirs();

                      File destination = new File(projectDir + File.separator + renameExtension(infoWithFile));
                      destination.getParentFile().mkdirs();
                      boolean skipWhenFileExists = (boolean) infoWithFile.triplet().skipWhenFileExists();
                      if (!(skipWhenFileExists) || (skipWhenFileExists && !(destination.exists()))) {
                        copyRenamePackage(toMove, destination, infoWithFile.triplet().packageName(), infoWithFile.triplet().addTheseImportedPackages());
                      }
                      progressMonitor.step(renameExtension(infoWithFile));
                      // use Java File to delete. Idea file needs synchronization and slows down the build. 
                      new File(infoWithFile.file().getPath()).delete();
                      // also mark as deleted in the deltas: 
                      {
                        Iterator<IDelta> delta_it = Sequence.fromIterable(deltas).iterator();
                        IDelta delta_var;
                        while (delta_it.hasNext()) {
                          delta_var = delta_it.next();
                          if (delta_var instanceof FilesDelta) {
                            ((FilesDelta) delta_var).deleted(infoWithFile.file());
                          }
                        }
                      }

                      return false;
                    }
                    private String renameExtension(Quatro infoWithFile) {
                      String filename = infoWithFile.file().getName();
                      String renamed = filename;
                      if ((boolean) infoWithFile.triplet().renameExtension()) {
                        int lastIndex = filename.lastIndexOf(infoWithFile.triplet().originalExtension());
                        renamed = filename.subSequence(0, lastIndex) + infoWithFile.triplet().renamedExtension();
                      }
                      return renamed;
                    }
                    /*package*/ Map<String, String> expandedPaths = MapSequence.fromMap(new HashMap<String, String>());
                    private String stagingRootExpanded(Quatro infoWithFile) {
                      String stagingRoot = infoWithFile.triplet().stagingRoot();
                      String expandedPath = MapSequence.fromMap(expandedPaths).get(stagingRoot);
                      if (expandedPath == null) {
                        expandedPath = check_dn7ye8_a0a0c0d0a0a2a1a3a0a1(MacrosFactory.forModule((AbstractModule) tres.module()), stagingRoot);
                        final IFile mpsProjectDir = FileSystem.getInstance().getFileByPath(expandedPath);
                        final String projectDirPath;
                        try {
                          projectDirPath = (new File(mpsProjectDir.getPath())).getCanonicalPath();
                        } catch (IOException e) {
                          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(e.getMessage())));
                          failure[0] = true;
                        }

                        MapSequence.fromMap(expandedPaths).put(stagingRoot, expandedPath);
                      }
                      return expandedPath;
                    }
                    private void copyRenamePackage(File toMove, File destination, String newPackageName, ArrayList<String> addTheseImportedPackages) {
                      if ((newPackageName == null || newPackageName.length() == 0)) {
                        FileUtil.copyFile(toMove, destination);
                      } else {
                        String line;
                        InputStream fis = null;
                        InputStreamReader isr = null;
                        BufferedReader br = null;
                        PrintWriter writer = null;
                        try {
                          fis = new FileInputStream(toMove);
                          isr = new InputStreamReader(fis, Charset.forName("UTF-8"));
                          br = new BufferedReader(isr);
                          writer = new PrintWriter(destination);
                          boolean firstLine = toMove.getName().endsWith(".java");
                          while ((line = br.readLine()) != null) {
                            if (firstLine && line.startsWith("package ")) {
                              writer.println("package " + newPackageName + ";");
                              for (String importedPackageName : addTheseImportedPackages) {
                                writer.println("import " + importedPackageName + ".*;");
                              }
                              firstLine = false;
                            } else {
                              writer.println(line);
                            }
                          }
                          if (br != null) {
                            br.close();
                          }
                          if (isr != null) {
                            isr.close();
                          }
                          if (fis != null) {
                            fis.close();
                          }
                          if (writer != null) {
                            writer.close();
                          }
                        } catch (Exception e) {
                          monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(e.getMessage())));
                          failure[0] = true;
                        } finally {
                        }

                      }
                    }
                  };

                  new DeltaReconciler(tres.delta()).visitAll(new FilesDelta.Visitor() {
                    @Override
                    public boolean acceptWritten(IFile file) {
                      doMove(file);
                      return true;
                    }
                    @Override
                    public boolean acceptKept(IFile file) {
                      doMove(file);
                      return true;
                    }
                    private void doMove(IFile file) {
                      StagingInfoTriplet triplet = MapSequence.fromMap(vars(pa.global()).needsStaging()).get(file.getName());
                      if (triplet != null) {
                        moveFunctionGeneric.fun(new Quatro(triplet, file));
                      }
                    }
                  });
                  if (failure[0]) {
                    return new IResult.FAILURE(_output_dn7ye8_a0b);
                  }
                  _output_dn7ye8_a0b = Sequence.fromIterable(_output_dn7ye8_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(tres)));
                }
              } finally {
                progressMonitor.done();
              }
            default:
              return new IResult.SUCCESS(_output_dn7ye8_a0b);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen"), new ITarget.Name("org.campagnelab.staging.stageFilesToWebApp.recordDestination")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compile")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(TResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._1) t).assign((Tuples._1) copyFrom);
      }
      return t;
    }
    public int workEstimate() {
      return 300;
    }
    public static stageFilesToWebApp_Facet.Target_stageFiles.Parameters vars(IPropertiesPool ppool) {
      return ppool.properties(name, stageFilesToWebApp_Facet.Target_stageFiles.Parameters.class);
    }
    public static class Parameters extends MultiTuple._1<Map<String, StagingInfoTriplet>> {
      public Parameters() {
        super();
      }
      public Parameters(Map<String, StagingInfoTriplet> needsStaging) {
        super(needsStaging);
      }
      public Map<String, StagingInfoTriplet> needsStaging(Map<String, StagingInfoTriplet> value) {
        return super._0(value);
      }
      public Map<String, StagingInfoTriplet> needsStaging() {
        return super._0();
      }
    }
    private static String check_dn7ye8_a0a0c0d0a0a2a1a3a0a1(MacroHelper checkedDotOperand, String stagingRoot) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.expandPath(stagingRoot);
      }
      return null;
    }
    private static boolean isNotEmptyString(String str) {
      return str != null && str.length() > 0;
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("org.campagnelab.staging.stageFilesToWebApp.stageFiles");
        if (properties.hasProperties(name)) {
          stageFilesToWebApp_Facet.Target_stageFiles.Parameters props = properties.properties(name, stageFilesToWebApp_Facet.Target_stageFiles.Parameters.class);
          MapSequence.fromMap(store).put("org.campagnelab.staging.stageFilesToWebApp.stageFiles.needsStaging", null);
        }
      }
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("org.campagnelab.staging.stageFilesToWebApp.stageFiles");
          stageFilesToWebApp_Facet.Target_stageFiles.Parameters props = properties.properties(name, stageFilesToWebApp_Facet.Target_stageFiles.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("org.campagnelab.staging.stageFilesToWebApp.stageFiles.needsStaging")) {
            props.needsStaging(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
