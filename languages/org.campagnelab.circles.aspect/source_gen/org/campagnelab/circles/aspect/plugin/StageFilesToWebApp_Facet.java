package org.campagnelab.circles.aspect.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.TResource;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.io.File;
import java.io.IOException;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.util.Function;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.internal.make.runtime.util.DeltaReconciler;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.util.MacroHelper;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;

public class StageFilesToWebApp_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("org.campagnelab.circles.aspect.StageFilesToWebApp");
  public StageFilesToWebApp_Facet() {
    ListSequence.fromList(targets).addElement(new StageFilesToWebApp_Facet.Target_StageFiles());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new StageFilesToWebApp_Facet.TargetProperties();
  }
  public static class Target_StageFiles implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("org.campagnelab.circles.aspect.StageFilesToWebApp.StageFiles");
    public Target_StageFiles() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_svfapc_a0a = null;
          final Iterable<TResource> input = (Iterable<TResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              progressMonitor.start("Staging files for web-app", 2);
              final Set<String> webViewSourceFiles = SetSequence.fromSet(new HashSet<String>());
              try {
                for (TResource tres : Sequence.fromIterable(input)) {
                  if (tres.module() == null) {
                    continue;
                  }
                  String expandPath = check_svfapc_a0b0a0c0a0a(MacrosFactory.forModule((AbstractModule) tres.module()));
                  if ((expandPath == null || expandPath.length() == 0)) {
                    continue;
                  }
                  final IFile projectDir = FileSystem.getInstance().getFileByPath(expandPath);
                  final String projectDirPath;
                  try {
                    projectDirPath = (new File(projectDir.getPath())).getCanonicalPath();
                  } catch (IOException e) {
                    monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(e.getMessage())));
                    return new IResult.FAILURE(_output_svfapc_a0a);
                  }
                  final String moduleDir = projectDirPath + File.separator + "web-app" + File.separator + "main" + File.separator + "java" + File.separator + tres.module().getModuleName().replace('.', '/');
                  (new File(moduleDir)).mkdirs();
                  final Function moveFunction = new Function<IFile, Boolean>() {
                    public Boolean fun(IFile file) {
                      File toMove = new File(file.getPath());
                      File destination = new File(moduleDir + File.separator + file.getName());
                      destination.getParentFile().mkdirs();
                      monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("Staging " + toMove.getName() + " to " + destination.getPath())));
                      FileUtil.copyFile(toMove, destination);
                      progressMonitor.step(file.getName());

                      return file.delete();
                    }
                  };
                  File modDir = new File(moduleDir);
                  if (modDir.exists() && modDir.isDirectory()) {
                    final IFile[] pluginXml = new IFile[1];
                    new DeltaReconciler(tres.delta()).visitAll(new FilesDelta.Visitor() {
                      @Override
                      public boolean acceptWritten(IFile file) {
                        if (file.getName().endsWith("WebView.java")) {
                          moveFunction.fun(file);
                        }
                        return true;
                      }
                      @Override
                      public boolean acceptKept(IFile file) {
                        if (file.getName().endsWith("WebView.java")) {
                          moveFunction.fun(file);
                        }
                        return true;
                      }
                    });
                  }
                  _output_svfapc_a0a = Sequence.fromIterable(_output_svfapc_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(tres)));
                }
              } finally {
                progressMonitor.done();
              }
            default:
              return new IResult.SUCCESS(_output_svfapc_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compile")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return false;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(TResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
    public int workEstimate() {
      return 300;
    }
    private static String check_svfapc_a0b0a0c0a0a(MacroHelper checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.expandPath("${module}/../../");
      }
      return null;
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
      } catch (RuntimeException re) {
      }
    }
  }
}
