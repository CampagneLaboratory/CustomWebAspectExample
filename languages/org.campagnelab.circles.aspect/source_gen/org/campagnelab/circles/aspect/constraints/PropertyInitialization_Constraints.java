package org.campagnelab.circles.aspect.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SReferenceLinkId;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class PropertyInitialization_Constraints extends BaseConstraintsDescriptor {
  public PropertyInitialization_Constraints() {
    super(MetaIdFactory.conceptId(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x4dafaaf043bc6a83L));
  }
  @Override
  protected Map<SReferenceLinkId, ReferenceConstraintsDescriptor> getNotDefaultSReferenceLinks() {
    Map<SReferenceLinkId, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLinkId, ReferenceConstraintsDescriptor>();
    references.put(MetaIdFactory.refId(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x4dafaaf043bc6a83L, 0x4dafaaf043bc6a84L), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x4dafaaf043bc6a83L, 0x4dafaaf043bc6a84L), this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getContextNode(), MetaAdapterFactory.getConcept(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x658b57cc0e19886eL, "org.campagnelab.circles.aspect.structure.Place"), true, false), MetaAdapterFactory.getReferenceLink(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x658b57cc0e19886eL, 0x658b57cc0e343db1L, "concept")), MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6cL, "propertyDeclaration"));
          }
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_51c2na_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }
  private static SNodePointer breakingNode_51c2na_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:d467affb-2c05-4eaf-a6d4-4049442a9d3e(org.campagnelab.circles.aspect.constraints)", "5597880810750201613");
}
