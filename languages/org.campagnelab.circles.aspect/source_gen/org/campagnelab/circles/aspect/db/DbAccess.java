package org.campagnelab.circles.aspect.db;

/*Generated by MPS */

import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
import org.apache.log4j.Level;
import com.orientechnologies.orient.core.query.live.OLiveQueryHook;
import com.orientechnologies.orient.core.record.impl.ODocument;
import org.jetbrains.mps.openapi.model.SNode;
import com.orientechnologies.orient.core.db.ODatabaseRecordThreadLocal;
import java.util.List;
import com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class DbAccess {
  public static ODatabaseDocumentTx openDb(String url, String user, String password) {
    ODatabaseDocumentTx db;
    db = new ODatabaseDocumentTx(url);
    if (url.startsWith("plocal:") && !((db.exists()))) {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Database did not exist");
      }
      return null;
    } else {
      db.open(user, password);
      db.activateOnCurrentThread();
      return db;
    }
  }
  public static ODatabaseDocumentTx openCreateDb(String url, String user, String password) {
    ODatabaseDocumentTx db;
    db = new ODatabaseDocumentTx(url);
    if (url.startsWith("plocal:") && !((db.exists()))) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Database did not exist, creating new one");
      }
      db.create();
      db.registerHook(new OLiveQueryHook(db));
    } else {
      db.open(user, password);
    }
    db.activateOnCurrentThread();
    return db;
  }
  public static void closeDb(ODatabaseDocumentTx db) {
    if (db != null) {
      db.close();
    }
  }
  public static ODocument lookupNode(ODatabaseDocumentTx db, SNode node) {
    // Calling this manually does prevent an initialization issue.  
    // see https://github.com/orientechnologies/orientdb/issues/5146#issuecomment-149212850  
    if (ODatabaseRecordThreadLocal.INSTANCE == null) {
    }
    List results = db.query(new OSQLSynchQuery("select * from " + DbClassNameUtil.dbName(node.getConcept()) + " where nodeId =?"), new Object[]{node.getNodeId().toString()});
    if (LOG.isInfoEnabled()) {
      LOG.info("submitting query: " + "select * from " + DbClassNameUtil.dbName(node.getConcept()) + " where nodeId =" + node.getNodeId().toString());
    }
    return (results.size() > 0 ? ((ODocument) results.get(0)) : null);
  }

  protected static Logger LOG = LogManager.getLogger(DbAccess.class);
}
