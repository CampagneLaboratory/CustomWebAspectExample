package org.campagnelab.circles.aspect.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.smodel.Language;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class GwtModule__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x43079579be16c5ecL, "org.campagnelab.circles.aspect.structure.GwtModule");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<List<SNode>> usedModules_id6mblWKe2TS0 = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("usedModules").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6mblWKe2TS0").registry(REGISTRY).build();
  public static final SMethod<SNode> getPersistedConcepts_id2KSnIHI_GQG = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getPersistedConcepts").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2KSnIHI_GQG").registry(REGISTRY).build();
  public static final SMethod<Iterable<Language>> getLanguages_id14gTH9Qziqw = new SMethodBuilder<Iterable<Language>>(new SJavaCompoundTypeImpl((Class<Iterable<Language>>) ((Class) Object.class))).name("getLanguages").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("14gTH9Qziqw").registry(REGISTRY).build();
  public static final SMethod<List<SNode>> getLanguageNames_id14gTH9Q_3cL = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getLanguageNames").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("14gTH9Q_3cL").registry(REGISTRY).build();
  public static final SMethod<String> getTargetPackageNameForLanguage_id14gTH9Qv6ej = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTargetPackageNameForLanguage").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("14gTH9Qv6ej").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> getTargetPackageName_id14gTH9QmnHN = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTargetPackageName").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("14gTH9QmnHN").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(usedModules_id6mblWKe2TS0, getPersistedConcepts_id2KSnIHI_GQG, getLanguages_id14gTH9Qziqw, getLanguageNames_id14gTH9Q_3cL, getTargetPackageNameForLanguage_id14gTH9Qv6ej, getTargetPackageName_id14gTH9QmnHN);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> usedModules_id6mblWKe2TS0(@NotNull SNode __thisNode__) {
    List<SNode> allModules = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(allModules).addElement(__thisNode__);
    ListSequence.fromList(allModules).addSequence(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x43079579be16c5ecL, 0x658b57cc0dc71a3cL, "uses"))).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x658b57cc0dc71a3eL, 0x658b57cc0dc71a3fL, "ref"));
      }
    }));
    return allModules;
  }
  /*package*/ static SNode getPersistedConcepts_id2KSnIHI_GQG(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x42f48c9f1414cf63L, "org.campagnelab.circles.aspect.structure.PersistedConcepts"))).first();
  }
  /*package*/ static Iterable<Language> getLanguages_id14gTH9Qziqw(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(GwtModule__BehaviorDescriptor.usedModules_id6mblWKe2TS0.invoke(__thisNode__)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SModelOperations.roots(SNodeOperations.getModel(it), MetaAdapterFactory.getConcept(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x42f48c9f1414cf63L, "org.campagnelab.circles.aspect.structure.PersistedConcepts"));
      }
    }).translate(new ITranslator2<SNode, Language>() {
      public Iterable<Language> translate(SNode it) {
        return (Iterable<Language>) IIncludeConcepts__BehaviorDescriptor.getLanguages_id14gTH9QzuK6.invoke(it);
      }
    }).distinct();
  }
  /*package*/ static List<SNode> getLanguageNames_id14gTH9Q_3cL(@NotNull SNode __thisNode__) {
    final List<SNode> result = new ArrayList<SNode>();
    Sequence.fromIterable(GwtModule__BehaviorDescriptor.getLanguages_id14gTH9Qziqw.invoke(__thisNode__)).visitAll(new IVisitor<Language>() {
      public void visit(Language it) {
        SNode ic = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")));
        SPropertyOperations.set(ic, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), it.getModuleName());
        ListSequence.fromList(result).addElement(ic);
      }
    });
    return result;
  }
  /*package*/ static String getTargetPackageNameForLanguage_id14gTH9Qv6ej(@NotNull SAbstractConcept __thisConcept__, SNode language, String dotSubPackageName) {

    if (language == null) {
      return "org.common" + dotSubPackageName;
    }
    return "org.webapp" + ".languages." + SPropertyOperations.getString(language, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).replace('.', '_') + dotSubPackageName;
  }
  /*package*/ static String getTargetPackageName_id14gTH9QmnHN(@NotNull SAbstractConcept __thisConcept__, SNode node, String dotSubPackageName) {
    SNode module = ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(node), MetaAdapterFactory.getConcept(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0x43079579be16c5ecL, "org.campagnelab.circles.aspect.structure.GwtModule"))).first();
    String nodeModelName = SModelOperations.getModelName(SNodeOperations.getModel(node));
    if (nodeModelName == null) {
      {
        final SNode c = node;
        if (SNodeOperations.isInstanceOf(c, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
          nodeModelName = INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(c);
        }
      }
      {
        final SNode e = node;
        if (SNodeOperations.isInstanceOf(e, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9845363abL, "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration"))) {
          nodeModelName = INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SLinkOperations.getTarget(e, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7df344a9L, 0x10f7df451aeL, "conceptDeclaration")));
        }
      }
      nodeModelName = "common";
    }
    String[] aspects = {"structure", "editor", "web", "behavior", "actions", "intentions", "constraints", "typesystem", "plugin", "accessories"};
    for (String aspectName : aspects) {
      if (nodeModelName.indexOf("." + aspectName) != -1) {
        nodeModelName = nodeModelName.substring(0, nodeModelName.indexOf("." + aspectName));
      }
    }
    return "org.webapp" + ".languages." + nodeModelName.replace('.', '_') + dotSubPackageName;
  }

  /*package*/ GwtModule__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) usedModules_id6mblWKe2TS0(node));
      case 1:
        return (T) ((SNode) getPersistedConcepts_id2KSnIHI_GQG(node));
      case 2:
        return (T) ((Iterable<Language>) getLanguages_id14gTH9Qziqw(node));
      case 3:
        return (T) ((List<SNode>) getLanguageNames_id14gTH9Q_3cL(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 4:
        return (T) ((String) getTargetPackageNameForLanguage_id14gTH9Qv6ej(concept, (SNode) parameters[0], (String) parameters[1]));
      case 5:
        return (T) ((String) getTargetPackageName_id14gTH9QmnHN(concept, (SNode) parameters[0], (String) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
