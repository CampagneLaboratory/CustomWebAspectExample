package org.campagnelab.circles.aspect.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.smodel.Language;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.lang.smodel.behavior.LanguageIdentity__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class IncludeLanguage__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0xdf0d6f24d611395L, "org.campagnelab.circles.aspect.structure.IncludeLanguage");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Iterable<SNode>> getConcepts_idRKPJ9dogRU = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getConcepts").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("RKPJ9dogRU").registry(REGISTRY).build();
  public static final SMethod<Iterable<Language>> getLanguages_id14gTH9QzuK6 = new SMethodBuilder<Iterable<Language>>(new SJavaCompoundTypeImpl((Class<Iterable<Language>>) ((Class) Object.class))).name("getLanguages").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("14gTH9QzuK6").registry(REGISTRY).build();
  /*package*/ static final SMethod<Void> addConcept_id6WHsPUNlZyJ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addConcept").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("6WHsPUNlZyJ").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(jetbrains.mps.smodel.SNode.class, ""));
  /*package*/ static final SMethod<Void> addLanguage_id6WHsPUNmla4 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addLanguage").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("6WHsPUNmla4").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Language.class, ""), SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getConcepts_idRKPJ9dogRU, getLanguages_id14gTH9QzuK6, addConcept_id6WHsPUNlZyJ, addLanguage_id6WHsPUNmla4);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SLinkOperations.setTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0xdf0d6f24d611395L, 0x2102cf5899ed6f61L, "language"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x3e6a40ba27dd70f3L, "jetbrains.mps.lang.smodel.structure.LanguageRefExpression"))));
  }

  /*package*/ static Iterable<SNode> getConcepts_idRKPJ9dogRU(@NotNull SNode __thisNode__) {
    List<SNode> concepts = ListSequence.fromList(new ArrayList<SNode>());
    {
      Iterator<Language> language_it = Sequence.fromIterable(IIncludeConcepts__BehaviorDescriptor.getLanguages_id14gTH9QzuK6.invoke(__thisNode__)).iterator();
      Language language_var;
      while (language_it.hasNext()) {
        language_var = language_it.next();
        IncludeLanguage__BehaviorDescriptor.addLanguage_id6WHsPUNmla4.invoke(__thisNode__, language_var, concepts);
      }
    }
    return ListSequence.fromList(concepts).distinct();
  }
  /*package*/ static Iterable<Language> getLanguages_id14gTH9QzuK6(@NotNull SNode __thisNode__) {
    List<Language> result = ListSequence.fromList(new ArrayList<Language>());
    Language l = ModuleRepositoryFacade.getInstance().getModule(LanguageIdentity__BehaviorDescriptor.getLanguage_id34EJa6aIcyj.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x8c40f9f4b3bd42d0L, 0x8b658e644273493cL, 0xdf0d6f24d611395L, 0x2102cf5899ed6f61L, "language")), MetaAdapterFactory.getContainmentLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x3e6a40ba27dd70f3L, 0x312abca18ab995e2L, "languageId"))).getQualifiedName(), Language.class);
    ListSequence.fromList(result).addElement(l);
    for (Language extended : SetSequence.fromSet(l.getAllExtendedLanguages())) {
      ListSequence.fromList(result).addElement(extended);
    }
    return result;
  }
  /*package*/ static void addConcept_id6WHsPUNlZyJ(@NotNull SNode __thisNode__, List<SNode> concepts, jetbrains.mps.smodel.SNode e) {
    ListSequence.fromList(concepts).addElement((SNode) e);
    // add interface concepts implemented by e: 
    {
      final SNode cd = e;
      if (SNodeOperations.isInstanceOf(cd, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        for (SNode i : ListSequence.fromList(SLinkOperations.getChildren(cd, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements")))) {
          ListSequence.fromList(concepts).addElement(SLinkOperations.getTarget(i, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc")));
        }
        SLinkOperations.getChildren(cd, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements"));
      }
    }
  }
  /*package*/ static void addLanguage_id6WHsPUNmla4(@NotNull SNode __thisNode__, Language l, List<SNode> concepts) {
    {
      Iterator<SNode> e_it = ListSequence.fromList(l.getConceptDeclarations()).iterator();
      SNode e_var;
      while (e_it.hasNext()) {
        e_var = e_it.next();
        IncludeLanguage__BehaviorDescriptor.addConcept_id6WHsPUNlZyJ.invoke(__thisNode__, concepts, e_var);
      }
    }
  }

  /*package*/ IncludeLanguage__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Iterable<SNode>) getConcepts_idRKPJ9dogRU(node));
      case 1:
        return (T) ((Iterable<Language>) getLanguages_id14gTH9QzuK6(node));
      case 2:
        addConcept_id6WHsPUNlZyJ(node, (List<SNode>) parameters[0], (jetbrains.mps.smodel.SNode) parameters[1]);
        return null;
      case 3:
        addLanguage_id6WHsPUNmla4(node, (Language) parameters[0], (List<SNode>) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
