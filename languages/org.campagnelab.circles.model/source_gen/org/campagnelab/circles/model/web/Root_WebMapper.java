package org.campagnelab.circles.model.web;

/*Generated by MPS */

import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizer;
import jetbrains.jetpad.model.property.ReadableProperty;
import com.google.gwt.dom.client.DivElement;
import jetbrains.jetpad.base.Registration;
import jetbrains.jetpad.mapper.SynchronizerContext;
import jetbrains.jetpad.model.event.EventHandler;
import jetbrains.jetpad.model.property.PropertyChangeEvent;
import com.google.common.base.Supplier;
import com.google.gwt.dom.client.Element;
import org.vectomatic.dom.svg.OMSVGSVGElement;
import org.vectomatic.dom.svg.utils.OMSVGParser;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.gwt.DomUtil;

public class Root_WebMapper extends Mapper<Root_WebModel, Root_WebView> {

  public Root_WebMapper(Root_WebModel model) {
    super(model, new Root_WebView());
    // Connect events to view here 
  }
  public static Synchronizer forSVG(final ReadableProperty<String> source, final DivElement target) {
    return new Synchronizer() {
      private Registration myRegistration;
      public void attach(SynchronizerContext ctx) {
        replaceSvg(target, source);
        this.myRegistration = source.addHandler(new EventHandler() {
          public void onEvent(PropertyChangeEvent<ReadableProperty<String>> event) {
          }
          public void onEvent(Object event) {
            replaceSvg(target, (((PropertyChangeEvent<ReadableProperty<String>>) event).getNewValue()));
          }
        });
      }
      public void detach() {
        this.myRegistration.remove();
      }
    };

  }
  private static void replaceSvg(DivElement target, ReadableProperty<String> source) {
    String svgDocument = ((Supplier<String>) source).get();
    if (svgDocument == null) {
      return;
    }
    Element div = target;
    OMSVGSVGElement svgElement = OMSVGParser.parse(svgDocument, false);
    if (div.hasChildNodes()) {
      div.replaceChild(svgElement.getElement(), div.getFirstChild());
    } else {
      div.appendChild(svgElement.getElement());
    }
  }
  @Override
  protected void registerSynchronizers(Mapper.SynchronizersConfiguration conf) {
    super.registerSynchronizers(conf);
    //  Insertion point for add synchronizer: 
    
    conf.add(forSVG(getSource().svgRendering, getTarget().svgRendering));;
    conf.add(Synchronizers.forPropsTwoWay(getSource().name, DomUtil.editableTextOf(getTarget().name)));

    //  map references like %circles% -> name 



  }

}
