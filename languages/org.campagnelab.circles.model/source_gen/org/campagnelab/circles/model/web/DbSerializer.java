package org.campagnelab.circles.model.web;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import org.campagnelab.circles.aspect.db.DbCache;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
import org.campagnelab.circles.aspect.db.DbAccess;
import org.apache.log4j.Level;
import com.orientechnologies.orient.core.record.impl.ODocument;
import org.campagnelab.circles.aspect.db.CIRCLES_BASE_CONCEPTS;
import org.campagnelab.circles.aspect.db.FIELDS;
import com.orientechnologies.orient.core.record.ORecord;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SNode;
import org.campagnelab.circles.aspect.db.DbNode;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.Solution;
import org.jetbrains.mps.openapi.module.SModuleId;
import java.util.ArrayList;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class DbSerializer {
  private final String url;
  private final MPSProject project;
  private DbCache dbCache = new DbCache();


  public DbSerializer(String url, MPSProject project) {
    this.url = url;
    this.project = project;
  }
  public void serializeModules(String user, String password, List<SModule> modules) {
    if (LOG.isInfoEnabled()) {
      LOG.info("serialize project " + this.project.getName());
    }
    ODatabaseDocumentTx db = null;
    try {
      db = DbAccess.openDb(url, user, password);
      if (db == null) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Unable to open the database at " + this.url);
        }
        return;
      }
      ODocument projectDoc = db.newInstance(CIRCLES_BASE_CONCEPTS.PROJECT.dbClass());
      projectDoc.field(FIELDS.NAME.dbName(), this.project.getName());
      List<ORecord> moduleDocs = getModulesField(projectDoc);
      for (SModule module : ListSequence.fromList(modules)) {
        ODocument moduleDoc = this.createModuleDoc(db, module);
        if (moduleDoc == null) {
          continue;
        }
        List<ORecord> modelDocs = getModelsField(moduleDoc);
        for (SModel model : Sequence.fromIterable(module.getModels())) {
          ODocument modelDoc = this.createModelDoc(db, model);
          List<ORecord> nodeDocs = getNodesField(modelDoc);
          for (SNode node : Sequence.fromIterable(model.getRootNodes())) {
            DbNode dbNode = new DbNode(db, node);
            dbNode.populate(node, modelDoc, dbCache);
            if (dbNode.asDoc() != null) {
              nodeDocs.add(dbNode.asDoc());
              dbCache.addNode(node);
            }
          }
          modelDoc.field(FIELDS.MODEL_NODES.dbName(), nodeDocs);
          modelDoc.save();
          modelDocs.add(modelDoc);
          dbCache.addModel(model);
        }
        moduleDoc.field(FIELDS.MODULE_MODELS.dbName(), modelDocs);
        moduleDoc.save();
        moduleDocs.add(moduleDoc);
        dbCache.addModule(module);
      }
      projectDoc.field(FIELDS.PROJECT_MODULES.dbName(), moduleDocs);
      projectDoc.save();
      this.resolveRefs(db, modules);
    } finally {
      DbAccess.closeDb(db);
    }
  }
  private void resolveRefs(ODatabaseDocumentTx db, List<SModule> modules) {
    for (SModule module : ListSequence.fromList(modules)) {
      for (SModel model : Sequence.fromIterable(module.getModels())) {
        for (SNode node : Sequence.fromIterable(model.getRootNodes())) {
          resolveNodeRef(db, node);
        }
      }
    }
  }
  private void resolveNodeRef(ODatabaseDocumentTx db, SNode node) {
    if (node.getConcept().getReferenceLinks().size() > 0) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Resolving refs for " + node.getNodeId());
      }
      if (dbCache.exist(node)) {
        DbNode dbnode = new DbNode(db, DbAccess.lookupNode(db, node));
        if (dbnode.asDoc() != null) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Source node found in the db");
          }
          dbnode.resolveRefs(node, dbCache);
        }
      } else {
        if (LOG.isInfoEnabled()) {
          LOG.info("Node is not in the cache");
        }
      }
    }
    // recursively resolve children refs 
    for (SNode child : Sequence.fromIterable(node.getChildren())) {
      resolveNodeRef(db, child);
    }
  }

  private ODocument createModuleDoc(ODatabaseDocumentTx db, SModule module) {
    ODocument doc = null;
    if (module instanceof Language) {
      doc = db.newInstance(CIRCLES_BASE_CONCEPTS.LANGUAGE.dbClass());
      if (LOG.isInfoEnabled()) {
        LOG.info("Creating Module for Language " + module.getModuleName());
      }
    } else if (module instanceof Solution) {
      doc = db.newInstance(CIRCLES_BASE_CONCEPTS.SOLUTION.dbClass());
      if (LOG.isInfoEnabled()) {
        LOG.info("Creating Module for Solution " + module.getModuleName());
      }
    }
    if (doc == null) {
      return doc;
    }
    doc.field(FIELDS.NAME.dbName(), module.getModuleName());
    SModuleId id = module.getModuleId();
    // use the string serialization of the moduleId: 
    doc.field(FIELDS.MODULE_MODULEID.dbName(), id.toString());
    return doc;
  }
  private ODocument createModelDoc(ODatabaseDocumentTx db, SModel model) {
    ODocument doc = db.newInstance(CIRCLES_BASE_CONCEPTS.MODEL.dbClass());
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating Model for " + model.getModelName());
    }
    doc.field(FIELDS.NAME.dbName(), model.getModelName());
    model.getModelId();
    return doc;
  }

  private List<ORecord> getModulesField(ODocument project) {
    List<ORecord> moduleDocs = project.field(FIELDS.PROJECT_MODULES.dbName());
    if (moduleDocs == null) {
      moduleDocs = new ArrayList<ORecord>();
    }
    return moduleDocs;
  }
  private List<ORecord> getModelsField(ODocument module) {
    List<ORecord> modelDocs = module.field(FIELDS.MODULE_MODELS.dbName());
    if (modelDocs == null) {
      modelDocs = new ArrayList<ORecord>();
    }
    return modelDocs;
  }
  private List<ORecord> getNodesField(ODocument model) {
    List<ORecord> nodeDocs = model.field(FIELDS.MODEL_NODES.dbName());
    if (nodeDocs == null) {
      nodeDocs = new ArrayList<ORecord>();
    }
    return nodeDocs;
  }

  protected static Logger LOG = LogManager.getLogger(DbSerializer.class);
}
