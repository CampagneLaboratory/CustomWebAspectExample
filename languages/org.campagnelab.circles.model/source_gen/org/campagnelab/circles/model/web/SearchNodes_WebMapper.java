package org.campagnelab.circles.model.web;

/*Generated by MPS */

import jetbrains.jetpad.mapper.Mapper;
import com.google.gwt.query.client.GQuery;
import com.google.gwt.query.client.Function;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.gwt.DomUtil;
import jetbrains.jetpad.mapper.MapperFactory;
import org.webapp.languages.jetbrains_mps_lang_core.client.models.BaseConcept_WebModel;

public class SearchNodes_WebMapper extends Mapper<SearchNodes_WebModel, SearchNodes_WebView> {

  public SearchNodes_WebMapper(SearchNodes_WebModel model) {
    super(model, new SearchNodes_WebView());
    // Connect events to view here 
    GQuery.$(getTarget().link_Search).click(new Function() {
      @Override
      public void f() {
        getSource().link_Search();
        //  the following is needed to prevent GWT from returning to the default place after a goto. 
        getEvent().preventDefault();
      }
    });
    GQuery.$(getTarget().link_Playground).click(new Function() {
      @Override
      public void f() {
        getSource().link_Playground();
        //  the following is needed to prevent GWT from returning to the default place after a goto. 
        getEvent().preventDefault();
      }
    });
    GQuery.$(getTarget().link_clearAll).click(new Function() {
      @Override
      public void f() {
        getSource().link_clearAll();
        //  return to the default view 
      }
    });
  }
  @Override
  protected void registerSynchronizers(Mapper.SynchronizersConfiguration conf) {
    super.registerSynchronizers(conf);
    //  Insertion point for add synchronizer: 
    
    // nothing here ;
    
    // nothing here ;
    
    // nothing here ;
    conf.add(Synchronizers.forPropsTwoWay(getSource().searchTerm, DomUtil.editableTextOf(getTarget().searchTerm)));

    conf.add(Synchronizers.forObservableRole(this, getSource().results, DomUtil.withAnimatedElementChildren(getTarget().results), new MapperFactory() {
      public Mapper createMapper(Object model) {
        // need to find a way to use the global WebModelFactory, not the one from a specific module.  
        return WebModelFactory.createMapper((BaseConcept_WebModel) model);
      }
    }));
    //  map references like %circles% -> name 



  }

}
