package org.campagnelab.circles.mockup.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import org.campagnelab.circles.mockup.behavior.Circle__BehaviorDescriptor;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class AddToDashboard_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddToDashboard_Intention() {
    super(MetaAdapterFactory.getConcept(0x3dc3d3d3b034480cL, 0x8b21d7a88903974bL, 0x764e562bb7514e13L, "org.campagnelab.circles.mockup.structure.Circle"), IntentionType.NORMAL, false, new SNodePointer("r:778cee05-6f9b-4077-be1a-ca6706d4fe71(org.campagnelab.circles.mockup.intentions)", "5883119402027709060"));
  }
  @Override
  public String getPresentation() {
    return "AddToDashboard";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddToDashboard_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add to Dashboard";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      Circle__BehaviorDescriptor.addToDashboard_id56_2uOh1scF.invoke(node);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddToDashboard_Intention.this;
    }
  }
}
