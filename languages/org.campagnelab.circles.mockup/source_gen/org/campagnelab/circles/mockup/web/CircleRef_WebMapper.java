package org.campagnelab.circles.mockup.web;

/*Generated by MPS */

import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.gwt.DomUtil;
import jetbrains.jetpad.mapper.Synchronizer;
import jetbrains.jetpad.base.Registration;
import jetbrains.jetpad.mapper.SynchronizerContext;

public class CircleRef_WebMapper extends Mapper<CircleRef_WebModel, CircleRef_WebView> {

  public CircleRef_WebMapper(CircleRef_WebModel model) {
    super(model, new CircleRef_WebView());
    // Connect events to view here 
  }
  @Override
  protected void registerSynchronizers(Mapper.SynchronizersConfiguration conf) {
    super.registerSynchronizers(conf);
    //  Insertion point for add synchronizer: 
    conf.add(Synchronizers.forPropsTwoWay(getSource().queryTerm, DomUtil.editableTextOf(getTarget().queryTerm)));

    //  map references like %circles% -> name 
    conf.add(new Synchronizer() {
      /*package*/ Registration myReg;
      /*package*/ Synchronizer myPropSynchronizer_name;
      @Override
      public void attach(SynchronizerContext ctx) {
        final Circle_WebModel ref = (Circle_WebModel) getSource().circle.get();
        if (ref != null) {
          myPropSynchronizer_name = Synchronizers.forPropsOneWay(ref.name, DomUtil.innerTextOf(getTarget().name));
          myPropSynchronizer_name.attach(ctx);

        }
      }
      @Override
      public void detach() {
        if (myPropSynchronizer_name != null) {
          myPropSynchronizer_name.detach();
        }
        myReg.remove();
      }
    });
    conf.add(new Synchronizer() {
      /*package*/ Registration myReg;
      /*package*/ Synchronizer myPropSynchronizer_id;
      @Override
      public void attach(SynchronizerContext ctx) {
        final Circle_WebModel ref = (Circle_WebModel) getSource().circle.get();
        if (ref != null) {
          myPropSynchronizer_id = Synchronizers.forPropsOneWay(ref.id, DomUtil.innerTextOf(getTarget().id));
          myPropSynchronizer_id.attach(ctx);

        }
      }
      @Override
      public void detach() {
        if (myPropSynchronizer_id != null) {
          myPropSynchronizer_id.detach();
        }
        myReg.remove();
      }
    });



  }

}
