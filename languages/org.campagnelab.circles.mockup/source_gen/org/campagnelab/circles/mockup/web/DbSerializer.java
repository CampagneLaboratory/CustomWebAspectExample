package org.campagnelab.circles.mockup.web;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
import org.campagnelab.circles.aspect.runtime.DbAccess;
import org.apache.log4j.Level;
import com.orientechnologies.orient.core.record.impl.ODocument;
import org.campagnelab.circles.aspect.runtime.CIRCLES_BASE_CONCEPTS;
import org.campagnelab.circles.aspect.runtime.FIELDS;
import java.util.Set;
import com.orientechnologies.orient.core.record.ORecord;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.Solution;
import java.util.HashSet;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class DbSerializer {
  private final String url;
  private final MPSProject project;

  public DbSerializer(String url, MPSProject project) {
    this.url = url;
    this.project = project;
  }
  public void serializeModules(String user, String password, List<SModule> modules) {
    if (LOG.isInfoEnabled()) {
      LOG.info("serialize project " + this.project.getName());
    }
    ODatabaseDocumentTx db = null;
    try {
      db = DbAccess.openDb(url, user, password);
      if (db == null) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Unable to open the database at " + this.url);
        }
        return;
      }
      ODocument doc = db.newInstance(CIRCLES_BASE_CONCEPTS.PROJECT.dbClass());
      doc.field(FIELDS.NAME.dbName(), this.project.getName());
      Set<ORecord> moduleDocs = getModulesField(doc);
      for (SModule module : ListSequence.fromList(modules)) {
        ODocument moduleDoc = this.serializeModule(db, module);
        moduleDocs.add(moduleDoc);
      }
      doc.field(FIELDS.PROJECT_MODULES.dbName(), moduleDocs);
      doc.save();
    } finally {
      DbAccess.closeDb(db);
    }
  }

  private ODocument serializeModule(ODatabaseDocumentTx db, SModule module) {
    ODocument doc = null;
    if (module instanceof Language) {
      doc = db.newInstance(CIRCLES_BASE_CONCEPTS.LANGUAGE.dbClass());
    } else if (module instanceof Solution) {
      doc = db.newInstance(CIRCLES_BASE_CONCEPTS.SOLUTION.dbClass());
    }
    if (doc == null) {
      return doc;
    }
    doc.field(FIELDS.NAME.dbName(), module.getModuleName());
    doc.save();
    return doc;
  }
  private Set<ORecord> getModulesField(ODocument project) {
    Set<ORecord> moduleDocs = project.field(FIELDS.PROJECT_MODULES.dbName());
    if (moduleDocs == null) {
      moduleDocs = new HashSet<ORecord>();
    }
    return moduleDocs;
  }
  protected static Logger LOG = LogManager.getLogger(DbSerializer.class);
}
